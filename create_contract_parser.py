import re

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–∞–±–ª–∏—Ü–µ–π ClickHouse
schema_file = "/Users/iliaoborin/fpds/create_clickhouse_table.py"
output_file = "/Users/iliaoborin/fpds/src/fpds/cli/parts/contract_parser.py"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã —Å —Ç–∏—Ä–µ –≤–º–µ—Å—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
special_fields = {
    "content__award__contractData__GFE_GFP": "content__award__contractData__GFE-GFP",
    "content__award__contractData__GFE_GFP__description": "content__award__contractData__GFE-GFP__description",
    "content__IDV__contractData__GFE_GFP": "content__IDV__contractData__GFE-GFP",
    "content__IDV__contractData__GFE_GFP__description": "content__IDV__contractData__GFE-GFP__description"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞
extra_fields = [
    "partition_year", "title", "contract_type", "link__rel", "link__type", "link__href", "modified"
]

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
column_pattern = re.compile(r'^\s*([\w__]+)\s+Nullable\(', re.MULTILINE)

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ **–≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è**
columns = []

with open(schema_file, "r", encoding="utf-8") as file:
    for line in file:
        match = column_pattern.search(line)
        if match:
            column_name = match.group(1)
            if column_name.startswith("content__") or column_name in extra_fields:
                if column_name not in columns:  # –ò—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    columns.append(column_name)

# –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ **–≤—Å–µ extra_fields —Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ**
columns = extra_fields + [col for col in columns if col not in extra_fields]

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ contract_parser.py
parser_text = """def extract_contract_data(contract, partition_year):
    return [
        partition_year,
"""

for col in columns[1:]:  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî partition_year, –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é
    col_name = special_fields.get(col, col)  # –ü–æ–¥–º–µ–Ω—è–µ–º, –µ—Å–ª–∏ –≤ special_fields
    parser_text += f'        contract.get("{col_name}"),\n'

parser_text += "    ]\n"

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
with open(output_file, "w", encoding="utf-8") as file:
    file.write(parser_text)

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
print(f"‚úÖ –§–∞–π–ª {output_file} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
print(f"üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(columns)}")
