import json
import clickhouse_connect
import gc
import time
from pathlib import Path
from datetime import datetime
from fpds.cli.parts.utils import process_booleans, log_missing_keys
from fpds.cli.parts.contract_parser import extract_contract_data
from fpds.cli.parts.columns import columns
from fpds.cli.parts.bool_fields import bool_fields

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BATCH_SIZE = 1000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞—Ç—á–µ
DATA_PATH = Path("/Volumes/Storage01/data")  # –ü—É—Ç—å –∫ JSON

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse...")
try:
    client = clickhouse_connect.get_client(
        host="localhost", port=8123, database="fpds_clickhouse"
    )
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    exit(1)


def find_json_file():
    """–ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π JSON-—Ñ–∞–π–ª."""
    for year_dir in sorted(DATA_PATH.iterdir()):
        if year_dir.is_dir():
            for json_file in sorted(year_dir.glob("*.json")):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {json_file}")
                return json_file
    print("‚ö†Ô∏è –ù–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    exit(0)


def process_data_and_insert(file_path):
    """–ß–∏—Ç–∞–µ—Ç JSON –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ ClickHouse"""
    print(f"üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º JSON-—Ñ–∞–π–ª: {file_path}")

    with open(file_path, "r") as f:
        records = json.load(f)

    if not records:
        print("‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(records)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

    total_inserted = 0
    missing_keys = set()

    for i in range(0, len(records), BATCH_SIZE):
        batch = []
        for contract in records[i:i + BATCH_SIZE]:
            contract = {k: v for k, v in contract.items()
                        if k in columns or v.strip()}
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º `partition_year`
            signed_date_keys = [
                "content__award__relevantContractDates__signedDate",
                "content__IDV__relevantContractDates__signedDate",
                "content__OtherTransactionAward__contractDetail__relevantContractDates__signedDate",
                "content__OtherTransactionIDV__contractDetail__relevantContractDates__signedDate",
            ]
            signed_date = next((contract.get(k)
                               for k in signed_date_keys if k in contract), None)
            if not signed_date:
                raise ValueError(f"‚ùå –û—à–∏–±–∫–∞! –í –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç `signed_date`. –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {json.dumps(contract, indent=2)}")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ (YYYY)
            partition_year = int(signed_date[:4])

            # üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
            contract = process_booleans(contract, bool_fields)

            # üì¶ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            contract_data = extract_contract_data(contract, partition_year)

            # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ `columns`
            extra_keys = set(contract.keys()) - set(columns)
            if extra_keys:
                missing_keys.update(extra_keys)

            batch.append(contract_data)

        # üöÄ –í—Å—Ç–∞–≤–∫–∞ –≤ ClickHouse
        if batch:
            client.insert("raw_contracts", batch, column_names=columns)
            total_inserted += len(batch)
            print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {total_inserted} –∑–∞–ø–∏—Å–µ–π.")
            gc.collect()
            time.sleep(2)  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É

    # üîî –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if missing_keys:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ JSON, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ `columns`:")
        for key in missing_keys:
            print(f"  - {key}")


# üîÑ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    json_file = find_json_file()  # üóÇ –ù–∞—Ö–æ–¥–∏–º JSON-—Ñ–∞–π–ª
    process_data_and_insert(json_file)  # üì• –í—Å—Ç–∞–≤–ª—è–µ–º –≤ ClickHouse
