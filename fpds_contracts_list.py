import os
import json
import mysql.connector
from pathlib import Path
from datetime import datetime
from fpds.config import DB_CONFIG

# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SOURCE_DIR = "/Volumes/T7/data"  # –ì–¥–µ –∏—Å–∫–∞—Ç—å JSON-—Ñ–∞–π–ª—ã
DEST_DIR = "/Volumes/T7/fpds"  # –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞–∑–±–∏—Ç—ã–µ JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
BATCH_SIZE = 1000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞—Ç—á–µ

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL


def get_db_connection():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL."""
    try:
        return mysql.connector.connect(**DB_CONFIG)
    except mysql.connector.Error as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        return None


# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞ –≤ `fpds_file_processing_log`
def update_log_status(file_id, status, total_files_created=0):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –≤ –ë–î."""
    conn = get_db_connection()
    if not conn:
        return

    cursor = conn.cursor()
    query = """
    UPDATE fpds_file_processing_log
    SET status = %s, total_files_created = %s, end_time = NOW()
    WHERE id = %s;
    """
    cursor.execute(query, (status, total_files_created, file_id))
    conn.commit()
    cursor.close()
    conn.close()


# ‚úÖ –ì—Ä—É–ø–ø–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ `fpds_contracts_list`
def batch_insert_contracts(contract_data_list):
    """–ì—Ä—É–ø–ø–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –ë–î."""
    if not contract_data_list:
        return

    conn = get_db_connection()
    if not conn:
        return

    cursor = conn.cursor()

    query = """
    INSERT INTO fpds_contracts_list (
        partition_date, piid, modification_number, modification_date, 
        signed_date, file_path, file_size, created_at, updated_at
    ) VALUES (%s, %s, %s, %s, %s, %s, %s, NOW(), NOW());
    """

    try:
        cursor.executemany(query, contract_data_list)
        conn.commit()
    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ MySQL: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-—Ñ–∞–π–ª–∞ (–ø–∞—Ä—Å–∏–Ω–≥ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ)
def process_json_file(file_path, year):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON-—Ñ–∞–π–ª: –ø–∞—Ä—Å–∏—Ç, —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏."""
    file_name = file_path.name
    print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_name}")

    # –ß–∏—Ç–∞–µ–º JSON
    try:
        with open(file_path, "r") as f:
            contracts = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_name}: {e}")
        return None

    if not contracts:
        print(f"‚ö†Ô∏è –§–∞–π–ª {file_name} –ø—É—Å—Ç!")
        return None

    total_contracts = len(contracts)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_contracts} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ.")

    # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ `fpds_file_processing_log`
    conn = get_db_connection()
    if not conn:
        return None

    cursor = conn.cursor()
    query = """
    INSERT INTO fpds_file_processing_log (
        year, file_name, total_contracts_in_file, status, start_time
    ) VALUES (%s, %s, %s, 'processing', NOW());
    """
    cursor.execute(query, (year, file_name, total_contracts))
    file_id = cursor.lastrowid
    conn.commit()
    cursor.close()
    conn.close()

    # ‚úÖ –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª—ã
    contracts_created = 0
    batch_data = []
    dest_folder = Path(DEST_DIR) / str(year)
    dest_folder.mkdir(parents=True, exist_ok=True)

    for contract in contracts:
        # üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
        signed_date = contract.get("content__award__relevantContractDates__signedDate") or \
            contract.get("content__IDV__relevantContractDates__signedDate") or \
            contract.get("content__OtherTransactionAward__contractDetail__relevantContractDates__signedDate") or \
            contract.get(
                "content__OtherTransactionIDV__contractDetail__relevantContractDates__signedDate")

        piid = contract.get("content__award__awardID__awardContractID__PIID") or \
            contract.get("content__IDV__contractID__IDVID__PIID") or \
            contract.get("content__OtherTransactionAward__OtherTransactionAwardID__OtherTransactionAwardContractID__PIID") or \
            contract.get(
                "content__OtherTransactionIDV__OtherTransactionIDVID__OtherTransactionIDVContractID__PIID")

        modification_number = contract.get("content__award__awardID__awardContractID__modNumber") or \
            contract.get("content__IDV__contractID__IDVID__modNumber") or \
            contract.get("content__OtherTransactionAward__OtherTransactionAwardID__OtherTransactionAwardContractID__modNumber") or \
            contract.get(
                "content__OtherTransactionIDV__OtherTransactionIDVID__OtherTransactionIDVContractID__modNumber")

        modification_date = contract.get("modified")

        if not piid:
            print("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –±–µ–∑ PIID! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        contract_filename = f"{piid}_{modification_number or '0'}.json"
        contract_filepath = dest_folder / contract_filename

        # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(contract_filepath, "w") as cf:
            json.dump(contract, cf, indent=2)

        # ‚úÖ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ MySQL
        partition_date = int(
            signed_date[:4] + signed_date[5:7]) if signed_date else None
        file_size = contract_filepath.stat().st_size

        batch_data.append((
            partition_date, piid, modification_number, modification_date,
            signed_date, str(contract_filepath), file_size
        ))

        contracts_created += 1

        # üîÑ –ï—Å–ª–∏ –±–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º
        if len(batch_data) >= BATCH_SIZE:
            batch_insert_contracts(batch_data)
            batch_data = []

    # üîÑ –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
    if batch_data:
        batch_insert_contracts(batch_data)

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –≤ `fpds_file_processing_log`
    if contracts_created == total_contracts:
        update_log_status(file_id, "completed", contracts_created)
    else:
        update_log_status(file_id, "failed", contracts_created)

    print(
        f"‚úÖ –§–∞–π–ª {file_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –°–æ–∑–¥–∞–Ω–æ {contracts_created} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.")
    return contracts_created


# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
def process_all_files():
    """–û–±—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–∞–ø–∫–∏ —Å –≥–æ–¥–∞–º–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON-—Ñ–∞–π–ª—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏."""
    for year_folder in sorted(Path(SOURCE_DIR).iterdir()):
        if year_folder.is_dir() and year_folder.name.isdigit():
            year = int(year_folder.name)
            print(f"\nüìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥ {year}")

            for json_file in sorted(year_folder.glob("*.json")):
                process_json_file(json_file, year)


if __name__ == "__main__":
    process_all_files()
