
import json
from pathlib import Path
import time

MISSING_PATH = Path(r"C:\Users\iobor\Projects\fpds\data")

def convert_bool(value, field_name="UNKNOWN_FIELD"):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ 1/0.
    - "true" ‚Üí 1
    - "false" ‚Üí 0
    - None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Üí None (NULL –≤ ClickHouse)
    - –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ "true"/"false" ‚Äî –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    """
    if value is None or (isinstance(value, str) and value.strip() == ""):
        return None  # ClickHouse –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å NULL

    if isinstance(value, str):
        value_lower = value.strip().lower()
        if value_lower == "true":
            return 1
        elif value_lower == "false":
            return 0
        else:
            print(f"üö® –ü–†–û–ë–õ–ï–ú–ê! –ü–æ–ª–µ `{field_name}` —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value} ({type(value)})")
            with open("error_log.txt", "a") as log_file:
                log_file.write(f"{field_name}: {value}\n")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º NULL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏

    if isinstance(value, (int, float)):  # –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return int(value)

    print(f"üö® –ü–†–û–ë–õ–ï–ú–ê! –ü–æ–ª–µ `{field_name}` —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {value} ({type(value)})")
    return None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é NULL


def process_contract_data(contract):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON –∫–æ–Ω—Ç—Ä–∞–∫—Ç:
    - –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (None, "", —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç "true"/"false" –≤ 1/0
    - –û—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª—é—á–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ `important_keys`, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
    """
    processed_contract = {}

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    important_keys = {
        "title",
        "contract_type",
        "link__rel",
        "link__type",
        "link__href",
        "modified"
    }

    for key, value in contract.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        if isinstance(value, str) and value.strip() == "":
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
        if key.startswith("content__") and isinstance(value, str):
            # <== –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è convert_bool –µ—Å—Ç—å!
            processed_contract[key] = convert_bool(value)
        else:
            processed_contract[key] = value  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –∫–ª—é—á–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
    for key in important_keys:
        if key not in processed_contract:
            processed_contract[key] = None  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º NULL –≤ ClickHouse

    return processed_contract


def process_booleans(contract, bool_fields):
    """
    üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –±—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ 1/0 –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π.
    """
    for field in bool_fields:
        if field in contract:
            try:
                # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–º—è –ø–æ–ª—è!
                contract[field] = convert_bool(contract[field], field)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–µ `{field}`: {contract[field]} ‚Üí {e}")
    return contract


def clean_keys(data):
    """
    –û—á–∏—â–∞–µ—Ç –∫–ª—é—á–∏ JSON –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫ –∏ –Ω–µ–∑–Ω–∞—á–∞—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    
    :param data: JSON-–æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    :return: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ "—á–∏—Å—Ç—ã—Ö" –∫–ª—é—á–µ–π
    """
    return {k for k, v in data.items() if isinstance(v, (str, list, dict)) and str(v).strip() not in ["", "\n", "\n              "]}


def log_missing_keys(contract, columns, json_file_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –∏–∑ JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º.
    
    :param contract: JSON-–æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    :param columns: –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ ClickHouse
    :param json_file_path: –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É JSON-—Ñ–∞–π–ª—É
    """
    excluded_keys = {
        "content__award__contractData__GFE-GFP",
        "content__award__contractData__GFE-GFP__description",
        "content__IDV__contractData__GFE-GFP",
        "content__IDV__contractData__GFE-GFP__description"
    }

    clean_contract_keys = clean_keys(contract)

    missing_keys = {
        key: contract[key] for key in clean_contract_keys
        if key not in columns and key not in excluded_keys
    }

    if missing_keys:
        timestamp = time.strftime("%Y-%m-%d_%H-%M-%S") + f"_{int(time.time() * 1000) % 1000}"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π MISSING_PATH
        MISSING_PATH.mkdir(parents=True, exist_ok=True)

        missing_json_path = MISSING_PATH / f"{Path(json_file_path).stem}_missing_{timestamp}.json"

        with open(missing_json_path, "w", encoding="utf-8") as missing_file:
            json.dump(missing_keys, missing_file, indent=4, ensure_ascii=False)

        print(f"üö® {len(missing_keys)} missing keys saved.")
        print(f"üíæ File: {missing_json_path}")
