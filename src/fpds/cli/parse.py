import asyncio
import json
import mysql.connector
import click
from datetime import datetime

from itertools import chain
from pathlib import Path

import click
from click import UsageError

from fpds import fpdsRequest
from fpds.utilities import validate_kwarg
from fpds.config import DB_CONFIG

def get_db_connection():
    """Creates and returns a database connection"""
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        return conn
    except mysql.connector.Error as e:
        click.echo(f"‚ö†Ô∏è Database connection error: {e}")
        return None

def log_parsing_result(parsed_date, file_path, status, update=False):
    """Logs the parsing result in the database"""
    conn = get_db_connection()
    if conn is None:
        click.echo("‚ö†Ô∏è Unable to connect to the database")
        return False
    
    cursor = conn.cursor()
    
    # –¶–≤–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    status_colors = {
        "completed": "green",
        "pending": "yellow",
        "failed": "red"
    }
    
    colored_status = click.style(status, fg=status_colors.get(status, "white"))

    if update:
        cursor.execute(
            "UPDATE parser_stage SET status = %s, updated_at = NOW() WHERE parsed_date = %s",
            (status, parsed_date)
        )
        conn.commit()
        click.echo(f"üìù Parsing status updated for {parsed_date}: {colored_status}")  # –í—ã–≤–æ–¥ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    else:
        cursor.execute("SELECT 1 FROM parser_stage WHERE parsed_date = %s", (parsed_date,))
        exists = cursor.fetchone()

        if exists:
            click.echo(f"‚ö†Ô∏è Data for {parsed_date} already exists in the database. Skipping download.")
            conn.close()
            return False
        else:
            cursor.execute(
                "INSERT INTO parser_stage (parsed_date, file_path, status, created_at, updated_at) "
                "VALUES (%s, %s, %s, NOW(), NOW())",
                (parsed_date, file_path, status)
            )
            conn.commit()
            click.echo(f"‚úÖ Data for {parsed_date} successfully added to the database with status: {colored_status}")

    conn.close()
    return True

def save_contracts_to_db(parsed_date, file_path):
    
    """–ü–∞—Ä—Å–∏—Ç JSON-—Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –í–°–ï –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –ë–î –∏ —Ñ–∞–π–ª—ã"""

    conn = get_db_connection()
    if conn is None:
        click.echo("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    cursor = conn.cursor()

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
        with open(file_path, "r") as file:
            contracts = json.load(file)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        contracts_dir = Path(f"/Users/iliaoborin/fpds/data/{parsed_date}/contracts")
        contracts_dir.mkdir(parents=True, exist_ok=True)

        saved_count = 0  # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        lost_contracts = []  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        mod_counters = {}  # –°—á–µ—Ç—á–∏–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π PIID

        for contract in contracts:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (PIID) –∏–ª–∏ IDV_PIID
            piid = contract.get("content__award__awardID__awardContractID__PIID") or \
                   contract.get("content__IDV__contractID__IDVID__PIID")

            if not piid:
                click.echo("üö´ –ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –±–µ–∑ PIID –∏ IDV_PIID!")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            mod_number = contract.get("content__award__awardID__awardContractID__modNumber")
            
            # –ï—Å–ª–∏ mod_number –Ω–µ "0", –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ None ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
            if mod_number and mod_number != "0":
                file_piid = f"{piid}_mod_{mod_number}"
            else:
                file_piid = piid  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PIID –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            contract_file_path = contracts_dir / f"{file_piid}.json"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
            error_log_path = contracts_dir / "errors.log"

            try:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ñ–∞–π–ª
                with open(contract_file_path, "w") as contract_file:
                    json.dump(contract, contract_file, indent=4)  # –ö—Ä–∞—Å–∏–≤—ã–π JSON

                saved_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            except Exception as file_error:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                error_message = f"{datetime.now().isoformat()} - –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {file_piid}: {file_error}\n"
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥-—Ñ–∞–π–ª
                with open(error_log_path, "a") as error_log:
                    error_log.write(error_message)

                continue  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            if "content__IDV" in contract:
                contract_type = "IDV"
            elif "content__award" in contract:
                contract_type = "AWARD"
            else:
                contract_type = "UNKNOWN"

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            if contract_type == "IDV":
                piid = contract.get("content__award__awardID__awardContractID__PIID", None)
                idv_piid = contract.get("content__IDV__contractID__IDVID__PIID", None)
                referenced_piid = contract.get("content__award__awardID__referencedIDVID__PIID", None)
                mod_number = contract.get("content__IDV__contractID__IDVID__modNumber", None)
                transaction_number = None  # –£ IDV –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ—Ç transactionNumber
                signed_date = contract.get("content__IDV__relevantContractDates__signedDate", None)
                effective_date = contract.get("content__IDV__relevantContractDates__effectiveDate", None)
                current_completion_date = contract.get("content__IDV__relevantContractDates__lastDateToOrder", None)
                obligated_amount = float(contract.get("content__IDV__dollarValues__obligatedAmount", 0) or 0)
                base_and_exercised_options_value = None
                base_and_all_options_value = float(contract.get("content__IDV__dollarValues__totalEstimatedOrderValue", 0) or 0)
                vendor_uei = contract.get("content__IDV__vendor__vendorSiteDetails__entityIdentifiers__vendorUEIInformation__UEI", None)
                naics_code = contract.get("content__IDV__productOrServiceInformation__principalNAICSCode", None)
                psc_code = contract.get("content__IDV__productOrServiceInformation__productOrServiceCode", None)
                contracting_office_agency_id = contract.get("content__IDV__purchaserInformation__contractingOfficeAgencyID", None)
                contracting_office_id = contract.get("content__IDV__purchaserInformation__contractingOfficeID", None)
                funding_requesting_agency_id = contract.get("content__IDV__purchaserInformation__fundingRequestingAgencyID", None)
                funding_requesting_office_id = contract.get("content__IDV__purchaserInformation__fundingRequestingOfficeID", None)
                number_of_offers_received = int(contract.get("content__IDV__competition__numberOfOffersReceived", 0) or 0)
                extent_competed = contract.get("content__IDV__competition__extentCompeted", None)

            elif contract_type == "AWARD":
                piid = contract.get("content__award__awardID__awardContractID__PIID", None)
                idv_piid = contract.get("content__award__awardID__referencedIDVID__PIID", None)
                referenced_piid = contract.get("content__award__awardID__referencedIDVID__PIID", None)
                mod_number = contract.get("content__award__awardID__awardContractID__modNumber", None)
                transaction_number = contract.get("content__award__awardID__awardContractID__transactionNumber", None)
                signed_date = contract.get("content__award__relevantContractDates__signedDate", None)
                effective_date = contract.get("content__award__relevantContractDates__effectiveDate", None)
                current_completion_date = contract.get("content__award__relevantContractDates__currentCompletionDate", None)
                obligated_amount = float(contract.get("content__award__dollarValues__obligatedAmount", 0) or 0)
                base_and_exercised_options_value = float(contract.get("content__award__dollarValues__baseAndExercisedOptionsValue", 0) or 0)
                base_and_all_options_value = float(contract.get("content__award__totalDollarValues__totalBaseAndAllOptionsValue", 0) or 0)
                vendor_uei = contract.get("content__award__vendor__vendorSiteDetails__entityIdentifiers__vendorUEIInformation__UEI", None)
                naics_code = contract.get("content__award__productOrServiceInformation__principalNAICSCode", None)
                psc_code = contract.get("content__award__productOrServiceInformation__productOrServiceCode", None)
                contracting_office_agency_id = contract.get("content__award__purchaserInformation__contractingOfficeAgencyID", None)
                contracting_office_id = contract.get("content__award__purchaserInformation__contractingOfficeID", None)
                funding_requesting_agency_id = contract.get("content__award__purchaserInformation__fundingRequestingAgencyID", None)
                funding_requesting_office_id = contract.get("content__award__purchaserInformation__fundingRequestingOfficeID", None)
                number_of_offers_received = int(contract.get("content__award__competition__numberOfOffersReceived", 0) or 0)
                extent_competed = contract.get("content__award__competition__extentCompeted", None)

            else:
                error_message = f"{datetime.now().isoformat()} - ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {json.dumps(contract, indent=2, ensure_ascii=False)}\n"

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥-—Ñ–∞–π–ª
                with open(error_log_path, "a", encoding="utf-8") as error_log:
                    error_log.write(error_message)
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î
            contract_data = (
                piid, idv_piid, referenced_piid, mod_number, transaction_number, signed_date, 
                effective_date, current_completion_date, obligated_amount, 
                base_and_exercised_options_value, base_and_all_options_value, vendor_uei, 
                naics_code, psc_code, contracting_office_agency_id, contracting_office_id, 
                funding_requesting_agency_id, funding_requesting_office_id, 
                number_of_offers_received, extent_competed, str(contract_file_path)
            )

            # –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            try:
                cursor.execute("""
                    INSERT INTO contracts (
                        piid, idv_piid, referenced_piid, mod_number, transaction_number, signed_date, 
                        effective_date, current_completion_date, obligated_amount, 
                        base_and_exercised_options_value, base_and_all_options_value, vendor_uei, 
                        naics_code, psc_code, contracting_office_agency_id, contracting_office_id, 
                        funding_requesting_agency_id, funding_requesting_office_id, 
                        number_of_offers_received, extent_competed, file_path, created_at, updated_at
                    ) VALUES (
                        %s, %s, %s, %s, %s, 
                        %s, %s, %s, %s, %s, 
                        %s, %s, %s, %s, %s, 
                        %s, %s, %s, %s, %s, %s, NOW(), NOW()
                    )
                """ , contract_data)

            except mysql.connector.IntegrityError:
                click.echo(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç PIID –≤ –ë–î {piid} –Ω–∞–π–¥–µ–Ω! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.")
                cursor.execute("""
                    INSERT INTO contracts (
                        piid, idv_piid, referenced_piid, mod_number, transaction_number, signed_date, 
                        effective_date, current_completion_date, obligated_amount, 
                        base_and_exercised_options_value, base_and_all_options_value, vendor_uei, 
                        naics_code, psc_code, contracting_office_agency_id, contracting_office_id, 
                        funding_requesting_agency_id, funding_requesting_office_id, 
                        number_of_offers_received, extent_competed, file_path, created_at, updated_at
                    ) VALUES (
                        %s, %s, %s, %s, %s, 
                        %s, %s, %s, %s, %s, 
                        %s, %s, %s, %s, %s, 
                        %s, %s, %s, %s, %s, %s, NOW(), NOW()
                    )
                """ , contract_data)

        conn.commit()
        click.echo(f"üìÑ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ {len(contracts)}")

    except Exception as e:
        click.echo(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {e}")

    finally:
        conn.close()

@click.command()
@click.option("-o", "--output", required=False, help="Output directory")
@click.argument("date")
def parse(date, output):
    """
    Parsing command for the FPDS Atom feed with date input

    \b
    Usage:
        $ fpds parse YYYY/MM/DD [OPTIONS]
    """

    # Check if the data already exists in the database before downloading
    year, month, day = date.split("/")
    DATA_FILE = Path(f"/Users/iliaoborin/fpds/data/{year}/{month}_{day}.json")
    if not log_parsing_result(date, str(DATA_FILE), "pending"):
        return

    formatted_date = f"SIGNED_DATE=[{date},{date}]"
    params = [formatted_date.split("=")]

    if not params:
        raise UsageError("Please provide at least one parameter")

    for _param in params:  # _param is a tuple
        name, value = _param
        _param[1] = validate_kwarg(kwarg=name, string=value)

    params_kwargs = dict(params)
    click.echo(f"üîç Params to be used for FPDS search: {params_kwargs}")

    request = fpdsRequest(**params_kwargs, cli_run=True)
    click.echo("üåê Retrieving FPDS records from ATOM feed...")

    try:
        data = asyncio.run(request.data())
        records = list(chain.from_iterable(data))

        # Create directory if it does not exist
        DATA_DIR = Path(f"/Users/iliaoborin/fpds/data/{year}")
        DATA_DIR.mkdir(parents=True, exist_ok=True)
        
        # Save data to file
        with open(DATA_FILE, "w") as outfile:
            json.dump(records, outfile)

        log_parsing_result(date, str(DATA_FILE), "completed", update=True)

        # Process and save contracts
        save_contracts_to_db(date, str(DATA_FILE))

        click.echo(f"{len(records)} records have been saved as JSON at: {DATA_FILE}")
    except Exception as e:
        log_parsing_result(date, str(DATA_FILE), "failed", update=True)
        click.echo(f"Error occurred while parsing: {e}")