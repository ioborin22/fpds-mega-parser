import requests
import mysql.connector
import warnings
from datetime import datetime, timedelta
from lxml import etree
from urllib.parse import urlparse, parse_qs
from pathlib import Path
from fpds.config import DB_CONFIG

warnings.filterwarnings("ignore")

BASE_URL = "https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&FEEDNAME=PUBLIC&q=SIGNED_DATE:[{date},{date}]"
DATA_DIR = Path("/Users/iliaoborin/fpds/data/")
BATCH_SIZE = 1000


def get_db_connection():
    """ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL """
    try:
        return mysql.connector.connect(**DB_CONFIG)
    except mysql.connector.Error as e:
        print(f"‚ö†Ô∏è Database connection error: {e}")
        return None


def fetch_fpds_data(date, start=None):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç XML-–¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–µ (–∏ —Å—Ç–∞—Ä—Ç—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) """
    url = BASE_URL.format(date=date)
    if start is not None:
        url += f"&start={start}"
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        return response.content
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {date}: {e}")
        return None


def count_records_for_date(date):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π FPDS –ø–æ –¥–∞—Ç–µ """
    xml_data = fetch_fpds_data(date)
    if not xml_data:
        return 0

    try:
        tree = etree.fromstring(xml_data)
        ns = {"atom": "http://www.w3.org/2005/Atom"}

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <entry> –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        entries = tree.findall(".//atom:entry", namespaces=ns)
        entry_count_first = len(entries)

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        last_link = tree.xpath("//atom:link[@rel='last']/@href", namespaces=ns)
        if not last_link:
            return entry_count_first

        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        parsed_url = urlparse(last_link[0])
        query_params = parse_qs(parsed_url.query)
        last_start = int(query_params.get("start", [0])[0])

        if last_start == 0:
            return entry_count_first

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        last_page_data = fetch_fpds_data(date, start=last_start)
        if not last_page_data:
            return entry_count_first

        last_tree = etree.fromstring(last_page_data)
        last_entries = last_tree.findall(".//atom:entry", namespaces=ns)
        entry_count_last = len(last_entries)

        # –°—á–∏—Ç–∞–µ–º –≤—Å–µ–≥–æ: (–ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü * 10) + –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        full_pages = last_start // 10
        total_records = (full_pages * 10) + entry_count_last
        return total_records

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –¥–ª—è {date}: {e}")
        return 0


def insert_into_db(date, records):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ signed_date_records.
    
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ records –∏ updated_at.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.
    """
    if records <= 0:
        return

    conn = get_db_connection()
    if not conn:
        return

    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    select_query = "SELECT records FROM signed_date_records WHERE signed_date = %s"
    cursor.execute(select_query, (date,))
    row = cursor.fetchone()

    if row is not None:
        current_records = row[0]
        if current_records == records:
            print(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è {date} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (records: {records}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
            cursor.close()
            conn.close()
            return
        else:
            updated_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            update_query = "UPDATE signed_date_records SET records = %s, updated_at = %s WHERE signed_date = %s"
            cursor.execute(update_query, (records, updated_at, date))
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è {date}: –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {records}")
    else:
        updated_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        insert_query = "INSERT INTO signed_date_records (signed_date, records, updated_at) VALUES (%s, %s, %s)"
        cursor.execute(insert_query, (date, records, updated_at))
        print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è {date}: {records} –∑–∞–ø–∏—Å–µ–π")

    conn.commit()
    cursor.close()
    conn.close()


def main():
    """ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è """
    start_date = datetime(1957, 10, 1)
    today_date = datetime.now().date()
    current_date = start_date

    while current_date.date() <= today_date:
        date_str = current_date.strftime("%Y/%m/%d")
        iso_date = current_date.strftime("%Y-%m-%d")
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: {date_str}")

        record_count = count_records_for_date(date_str)
        if record_count > 0:
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {record_count}")
            insert_into_db(iso_date, record_count)

        current_date += timedelta(days=1)

    print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞.")


if __name__ == "__main__":
    main()
