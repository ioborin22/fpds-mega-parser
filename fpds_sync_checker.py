import clickhouse_connect
import mysql.connector
from fpds.config import DB_CONFIG
import sys
import subprocess
import shutil
from pathlib import Path
from clickhouse_driver import Client
from datetime import datetime

client = Client(
            host='localhost',
            port=9000,
            user='default',
            password='',
            database='fpds_clickhouse'
        )

def get_clickhouse_data():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ ClickHouse, –≥—Ä—É–ø–ø–∏—Ä—É—è –ø–æ partition_date.
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∫–∞–∫ 'YYYY-MM-DD'.
    """
    client = clickhouse_connect.get_client(host="localhost", port=8123)
    query = """
        SELECT 
            partition_date, 
            COUNT(*) as count
        FROM fpds_clickhouse.raw_contracts
        GROUP BY partition_date
        ORDER BY partition_date
    """
    result = client.query(query)
    data = {}
    for row in result.result_rows:
        partition_date, count = row
        # partition_date —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime.date
        date_str = partition_date.strftime("%Y-%m-%d")
        data[date_str] = count
    return data


def get_mysql_data():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL –∏–∑ —Ç–∞–±–ª–∏—Ü—ã signed_date_records,
    –≥—Ä—É–ø–ø–∏—Ä—É—è –ø–æ –¥–∞—Ç–µ –∏ —Å—É–º–º–∏—Ä—É—è –ø–æ–ª–µ fpds_records.
    """
    db_conn = mysql.connector.connect(**DB_CONFIG)
    cursor = db_conn.cursor()
    query = """
        SELECT DATE(signed_date) as date, SUM(fpds_records) as count
        FROM signed_date_records
        WHERE fpds_respond IS NULL
        GROUP BY date
    """
    cursor.execute(query)
    data = {}
    for row in cursor.fetchall():
        date_val, count = row
        date_str = date_val.strftime("%Y-%m-%d")
        data[date_str] = count
    cursor.close()
    db_conn.close()
    return data


def compare_data():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ ClickHouse –∏ MySQL.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–¥–∞—Ç–∞, count_clickhouse, count_mysql) –¥–ª—è –¥–∞—Ç,
    –≥–¥–µ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ —Ä–∞–≤–Ω–∞ 0.
    """
    ch_data = get_clickhouse_data()
    mysql_data = get_mysql_data()
    all_dates = set(ch_data.keys()).union(mysql_data.keys())
    issues = []
    for date in sorted(all_dates):
        ch_count = ch_data.get(date, 0)
        mysql_count = mysql_data.get(date, 0)
        if ch_count != mysql_count:
            issues.append((date, ch_count, mysql_count))
    return issues


def main():
    issues = compare_data()
    if issues:
        date, ch_count, mysql_count = issues[0]
        diff = ch_count - mysql_count
        print(f"üö® [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: –î–∞—Ç–∞: {date}, ClickHouse: {ch_count}, FPDS: {mysql_count}, –†–∞–∑–Ω–∏—Ü–∞: {diff}")

        # ‚úÖ –®–∞–≥ 1: DROP ClickHouse
        print(f"üóë  [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏—é –∑–∞ –¥–∞—Ç—É {date}...")
        try:
            drop_partition_sql = f"ALTER TABLE raw_contracts DROP PARTITION '{date}'"
            client.execute(drop_partition_sql)
            print(f"üî• [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ü–∞—Ä—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ö†Ô∏è [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–∏: {e}")

        # ‚úÖ –®–∞–≥ 2: –°–∫–∞—á–∏–≤–∞–µ–º JSON –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        date_slash = date.replace("-", "/")  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç YYYY/MM/DD
        subprocess.run(["fpds", "get", date_slash])

        # ‚úÖ –®–∞–≥ 3: –í—Å—Ç–∞–≤–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
        subprocess.run(["python", "insert_json_clickhouse_direct.py", date])

        # ‚úÖ –®–∞–≥ 4: –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        year = date[:4]
        month_day = date[5:7] + "_" + date[8:10]

        source_file = Path(rf"C:\Users\iobor\Projects\fpds\data\{year}\{month_day}.json")
        destination_file = Path(rf"D:\data\{year}\{month_day}.json")

        try:
            if source_file.exists():
                destination_file.parent.mkdir(parents=True, exist_ok=True)
                print(f"üìÇ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª {source_file} –≤ {destination_file}...")
                shutil.move(str(source_file), str(destination_file))
                print(f"‚ñ∂Ô∏è [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â—ë–Ω.")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")



if __name__ == "__main__":
    main()
