import os
import json
import mysql.connector
import re  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
from pathlib import Path
from datetime import datetime
from fpds.config import DB_CONFIG  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
DATA_DIR = Path("/Volumes/Storage01/data")

# –°—Ç–∞—Ç—É—Å—ã —Ñ–∞–π–ª–æ–≤
STATUS_FILE_MISSING = "file_missing"
STATUS_FILE_FOUND = "file_found"


def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        return mysql.connector.connect(**DB_CONFIG)
    except mysql.connector.Error as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None


def file_exists_in_db(cursor, signed_date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
    query = """
    SELECT COUNT(*) FROM file_processing_status WHERE signed_date = %s;
    """
    cursor.execute(query, (signed_date,))
    return cursor.fetchone()[0] > 0


def scan_and_insert_files():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    conn = get_db_connection()
    if not conn:
        return
    cursor = conn.cursor()

    for year_dir in sorted(DATA_DIR.iterdir()):
        if year_dir.is_dir() and year_dir.name.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≥–æ–¥–æ–º
            for json_file in sorted(year_dir.glob("*.json")):
                file_name = json_file.name  # –ò–º—è —Ñ–∞–π–ª–∞, –≤–∫–ª—é—á–∞—è .json

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–º—è —Ñ–æ—Ä–º–∞—Ç—É MM_DD.json
                if not re.match(r"^\d{2}_\d{2}\.json$", file_name):
                    print(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º: {file_name}")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º –∏–º–µ–Ω–µ–º

                # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ .json
                year, month_day = year_dir.name, json_file.stem
                month, day = month_day.split("_")
                signed_date = f"{year}-{month}-{day}"

                if file_exists_in_db(cursor, signed_date):
                    print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å: {signed_date}")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
                file_size = json_file.stat().st_size

                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ
                try:
                    with open(json_file, "r") as f:
                        records = json.load(f)
                        record_count = len(records) if isinstance(
                            records, list) else 0
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {json_file}: {e}")
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                query = """
                INSERT INTO file_processing_status (signed_date, record_count, file_size_bytes, file_path, status)
                VALUES (%s, %s, %s, %s, %s);
                """
                cursor.execute(query, (signed_date, record_count,
                               file_size, str(json_file), STATUS_FILE_FOUND))
                conn.commit()
                print(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {json_file} ({record_count} –∑–∞–ø–∏—Å–µ–π, {file_size} –±–∞–π—Ç)")

    cursor.close()
    conn.close()
    print("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤!")


if __name__ == "__main__":
    scan_and_insert_files()
